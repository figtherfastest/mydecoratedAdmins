import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';

/**
 * 一个任务调度器,用于任务队列的维护
 */
var Uploader = function () {
  _createClass(Uploader, [{
    key: 'onComplete',
    // 文件分块的大小
    value: function onComplete() {} // 所有队列中的任务上传完成后引发的事件
    // 上传线程计数器

  }]);

  function Uploader(_ref) {
    var url = _ref.url,
        _ref$maxThreads = _ref.maxThreads,
        maxThreads = _ref$maxThreads === undefined ? 3 : _ref$maxThreads,
        _ref$chunkSize = _ref.chunkSize,
        chunkSize = _ref$chunkSize === undefined ? 0 : _ref$chunkSize;

    _classCallCheck(this, Uploader);

    this._$$threads = 0;

    // this.url = url // 上传的地址
    this._$$maxThreads = maxThreads; // 最大同时上传数
    this._$$queue = []; // 整个上传队列
    this._$$chunkSize = chunkSize;
  }

  /**
   * 向上传队列中增加一个任务。同时启动上传队列
   * @param fileItem
   */


  _createClass(Uploader, [{
    key: 'uploadItem',
    value: function uploadItem(fileItem) {
      var _this = this;

      fileItem._$$state = 'runnable'; // 任务进入队列之前，转入runable态
      this._$$queue.push(fileItem);
      setTimeout(function () {
        _this._$$upload();
      });
    }

    /**
     * 上传文件
     */

  }, {
    key: '_$$upload',
    value: function _$$upload() {
      var _this2 = this;

      if (this._$$queue.length <= 0) return;
      // 获取队列的头，并上传

      var _loop = function _loop() {
        var fileItem = _this2._$$queue.shift();
        if (fileItem === undefined) {} else {
          var fn = fileItem.onComplete;
          fileItem.onComplete = function () {
            // 在文件上传完成之后，
            _this2._$onComplete(fileItem, fn);
          };
          fileItem._$$state = 'running';
          _this2._$$threads++;
          fileItem.run(); // 启动任务
        }
      };

      while (this._$$threads < this._$$maxThreads && this._$$queue.length > 0) {
        _loop();
      }
    }

    /**
     * 当某个任务完成之后，重新启动上传进程
     */

  }, {
    key: '_$onComplete',
    value: function _$onComplete(item, fn) {
      var _this3 = this;

      this._$$threads--;
      this._$$upload();
      if (fn instanceof Function) {
        fn.call(item);
      }
      setTimeout(function () {
        if (_this3._$$threads <= 0) {
          _this3.onComplete();
        }
      });
    }
  }]);

  return Uploader;
}();

export { Uploader as default };