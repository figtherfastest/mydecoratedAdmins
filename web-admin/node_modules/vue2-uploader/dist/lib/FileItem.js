import _regeneratorRuntime from 'babel-runtime/regenerator';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import uuid from 'uuid/v1';
import axios from 'axios';
import config from './config';

// const $http = config.$http // 定义一个上传的axios对象
var CancelToken = axios.CancelToken;

var FileItem = function () {
  _createClass(FileItem, [{
    key: 'onProgress',
    // 分块错误次数
    // 当前分片的索引号
    // 当前的位置
    // 当前状态,模拟线程的5态 new,runnable,running,blocked,dead
    value: function onProgress(progress) {} // 总的分片数
    // 任务的分片大小
    // 取消标记
    // 分块信息

  }, {
    key: 'onComplete',
    value: function onComplete() {}
  }, {
    key: 'onSuccess',
    value: function onSuccess(response) {}
  }, {
    key: 'onError',
    value: function onError(e) {}
  }, {
    key: 'onStateChanged',
    value: function onStateChanged() {}
  }, {
    key: 'onCancel',
    value: function onCancel() {} // 表示文件已经上传的部分

    /**
     * 待上传的文件
     */

  }, {
    key: 'id',


    /**
     * 获取文件的ID
     */
    get: function get() {
      return this._$$id;
    }
  }, {
    key: 'progress',
    set: function set(progress) {
      this._$$progress = progress;
      this.onProgress(progress);
    }

    /**
     * 获取上传进度
     */
    ,
    get: function get() {
      var _p = this._$$loaded / this.file.size * 100;
      if (_p >= 100 && this._$$state === 'dead') {
        return 100;
      } else if (_p > 1) {
        return _p - 1;
      }
    }
  }, {
    key: 'loaded',
    get: function get() {
      return this._$$loaded;
    }

    /**
     * 获取状态
     */

  }, {
    key: 'state',
    get: function get() {
      return this._$$state;
    }

    /**
     *
     */
    ,
    set: function set(state) {
      this._$$state = state;
      this.onStateChanged(this);
    }
  }]);

  function FileItem(_ref) {
    var file = _ref.file,
        url = _ref.url,
        _ref$chunkSize = _ref.chunkSize,
        chunkSize = _ref$chunkSize === undefined ? 0 : _ref$chunkSize,
        _ref$$http = _ref.$http,
        $http = _ref$$http === undefined ? config.$http : _ref$$http;

    _classCallCheck(this, FileItem);

    this._$$state = 'new';
    this._$$position = 0;
    this._$$chunkIndex = 0;
    this._$$chunkCount = 0;
    this._$$error = 0;
    this._$$loaded = 0;

    this._$$id = uuid();
    this.file = file;
    this._$$url = url;
    this._$$chunkSize = chunkSize;
    if (chunkSize > 0) {
      this._$$chunkCount = Math.ceil(file.size / chunkSize);
    }
    this.$http = $http;
  }

  _createClass(FileItem, [{
    key: 'uploadItem',
    value: function uploadItem() {}
    // 启动上传事件，由于上传队列的存在，FileItem自身不能控制上传队列，因此需要在外部实现该方法


    // 执行任务

  }, {
    key: 'run',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var response, _response;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.state === 'dead')) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt('return');

              case 2:
                if (!(this._$$chunkSize > 0)) {
                  _context.next = 28;
                  break;
                }

                response = void 0;

              case 4:
                if (!(this._$$position < this.file.size)) {
                  _context.next = 25;
                  break;
                }

                if (!(this.state === 'dead')) {
                  _context.next = 9;
                  break;
                }

                return _context.abrupt('return');

              case 9:
                _context.prev = 9;
                _context.next = 12;
                return this._$$uploadChunk();

              case 12:
                response = _context.sent;

                this._$$position += this._$$chunkSize;
                this._$$error = 0; // 每次上传成功，充值错误计数
                this._$$chunkIndex++;
                _context.next = 23;
                break;

              case 18:
                _context.prev = 18;
                _context.t0 = _context['catch'](9);

                if (!(this._$$error++ >= 10)) {
                  _context.next = 23;
                  break;
                }

                // 上传错误超限上传失败,引发事件
                this.onError(_context.t0);
                return _context.abrupt('break', 25);

              case 23:
                _context.next = 4;
                break;

              case 25:
                if (this._$$error <= 0) {
                  this.progress = 100; // 完成之后设置进度
                  this.onSuccess(response);
                }
                _context.next = 39;
                break;

              case 28:
                _context.prev = 28;
                _context.next = 31;
                return this._$$uploadFile();

              case 31:
                _response = _context.sent;

                this.progress = 100;
                this.onSuccess(_response);
                _context.next = 39;
                break;

              case 36:
                _context.prev = 36;
                _context.t1 = _context['catch'](28);

                this.onError(_context.t1);

              case 39:
                this.onComplete();
                this.state = 'dead'; // 标记任务完成

              case 41:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[9, 18], [28, 36]]);
      }));

      function run() {
        return _ref2.apply(this, arguments);
      }

      return run;
    }()

    /**
     * 上传完整的文件，而不是分块上传
     */

  }, {
    key: '_$$uploadFile',
    value: function _$$uploadFile() {
      var _this = this;

      this._$$cancelTokenSource = CancelToken.source();
      var cancelToken = this._$$cancelTokenSource.token;
      var data = new FormData();
      data.append('file', this.file);
      return this.$http.post(this._$$url, data, {
        cancelToken: cancelToken,
        onUploadProgress: function onUploadProgress(p) {
          // 进度改变时，刷新块进度
          _this._$$loaded = p.loaded;
          _this.onProgress(_this.progress);
        }
      });
    }
  }, {
    key: '_$$uploadChunk',
    value: function _$$uploadChunk() {
      var _this2 = this;

      this._$$cancelTokenSource = CancelToken.source();
      var cancelToken = this._$$cancelTokenSource.token;
      var blob = this.file.slice(this._$$position, this._$$position + this._$$chunkSize);
      var data = new FormData();
      data.append('file', blob);
      data.append('filename', this.file.name);
      return this.$http.post(this._$$url, data, {
        headers: {
          'Chunk-Index': this._$$chunkIndex,
          'File-Id': this.id,
          'Chunk-Count': this._$$chunkCount
        },
        cancelToken: cancelToken,
        onUploadProgress: function onUploadProgress(p) {
          // 进度改变时，刷新块进度
          _this2._$$loaded = _this2._$$position + p.loaded;
          _this2.onProgress(_this2.progress);
        }
      });
    }

    /**
     * 取消上传文件
     */
    /**
     * 取消这个上传任务
     */

  }, {
    key: 'cancel',
    value: function cancel() {
      if (this._$$cancelTokenSource) {
        this._$$cancelTokenSource.cancel('用户取消了上传'); // 取消上传
      }
      this.state = 'dead'; // 将任务标记为结束
      this.onCancel();
    }
  }]);

  return FileItem;
}();

export { FileItem as default };